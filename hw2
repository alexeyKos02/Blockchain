// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

contract Storage {

    uint256 public number;

    struct MyStruct {
        uint256 id;
        string name;
        bool isActive;
    }

    event DataAdded(bytes32 key, uint256 id, string name, bool isActive);
    event DataRemoved(bytes32 key);

    mapping(bytes32 => MyStruct) public dataMapping;

    function store(uint256 num) public {
        number = num;
    }

    function retrieve() public view returns (uint256){
        return number;
    }
    function addDataToMapping(bytes32 key, uint256 _id, string memory _name, bool _isActive) public {
        MyStruct memory newStruct = MyStruct(_id, _name, _isActive);
        dataMapping[key] = newStruct;
        emit DataAdded(key, _id, _name, _isActive);
    }
    function removeDataFromMapping(bytes32 key) public {
        delete dataMapping[key];
        emit DataRemoved(key);
    }
    
}
